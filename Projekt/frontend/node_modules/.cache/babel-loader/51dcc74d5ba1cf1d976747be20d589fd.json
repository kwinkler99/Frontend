{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/kasia/inf/Front2/winkler-katarzyna/projekt/src/Component/form.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getData } from '../Actions/getData';\nimport { editDone } from '../Actions/editDoneProduct';\nimport { deleteProduct } from '../Actions/deleteProduct';\nimport { newProduct } from '../Actions/newProduct';\nimport { deleteAllProducts } from '../Actions/deleteAll';\nimport './form.css';\nconst prepare_product = {\n  id: \"new\",\n  name: \"\",\n  brand: \"\",\n  price: \"0\",\n  currency: \"\",\n  image_link: \"\",\n  description: \"\",\n  category: \"\",\n  product_types: \"\",\n  product_colors: [],\n  tag_list: \"\",\n  active: \"\",\n  comments: []\n};\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      take: \"new-product\",\n      product: prepare_product,\n      comments: [{\n        id: 0,\n        accept: false,\n        email: \"\",\n        content: \"\"\n      }]\n    };\n    this.takeProduct = this.takeProduct.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.createInput = this.createInput.bind(this);\n    this.handleDone = this.handleDone.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleDeleteAll = this.handleDeleteAll.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handelAddComment = this.handelAddComment.bind(this);\n    this.handleChangeComment = this.handleChangeComment.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getData();\n  }\n\n  takeProduct(event) {\n    const take_product = event !== \"new-product\" ? this.props.data.data.filter(item => item.id === parseInt(event))[0] : prepare_product;\n    this.setState({\n      take: event,\n      product: { ...take_product\n      },\n      comments: [...take_product.comments, {\n        id: 0,\n        accept: false,\n        email: \"\",\n        content: \"\"\n      }]\n    });\n  }\n\n  handleChange(ev, what) {\n    this.setState({ ...this.state,\n      product: { ...this.state.product,\n        [what]: ev\n      }\n    });\n  }\n\n  createInput(word, what) {\n    if (what !== 'product_colors') {\n      return what !== 'description' && what !== 'id' && what !== 'active' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: ev => this.handleChange(ev.target.value, what),\n          value: this.state.product[what]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 60\n        }, this)]\n      }, what, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this) || what === 'description' && what !== 'id' && what !== 'active' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"description\",\n          onChange: ev => this.handleChange(ev.target.value, 'description'),\n          value: this.state.product.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 66\n        }, this)]\n      }, what, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  handleDone(id) {\n    const product = this.state.product;\n\n    if (product.brand.length === 0) {\n      product.brand = \"other\";\n    }\n\n    if (product.price.length === 0) {\n      product.price = \"0\";\n    }\n\n    if (product.category.length === 0) {\n      product.category = \"other\";\n    }\n\n    this.setState({ ...this.state,\n      product: { ...product\n      }\n    });\n\n    if (this.state.product.name.length === 0) {\n      alert(\"Name is required\");\n    } else if (this.state.product.description.split(\"\").length < 100) {\n      alert(\"At least 100 letters in description\");\n    } else {\n      if (this.state.take !== 'new-product') {\n        this.setState({\n          take: \"new-product\",\n          product: prepare_product,\n          comments: [{\n            id: 0,\n            accept: false,\n            email: \"\",\n            content: \"\"\n          }]\n        });\n      } else {\n        const filterComment = this.state.comments.filter(item => item.accept !== false);\n        const new_product = this.state.product;\n        new_product['id'] = id + 1;\n        this.props.newProduct({ ...new_product,\n          comments: filterComment\n        });\n        this.setState({ ...this.state,\n          product: prepare_product,\n          comments: [{\n            id: 0,\n            accept: false,\n            email: \"\",\n            content: \"\"\n          }]\n        });\n      }\n\n      this.props.getData();\n    }\n  }\n\n  handleDelete() {\n    if (this.state.take !== 'new-product') {\n      this.props.deleteProduct(this.state.product.id);\n      this.setState({ ...this.state,\n        product: prepare_product\n      });\n    }\n  }\n\n  handleDeleteAll() {\n    this.props.deleteAllProducts();\n  }\n\n  handleReset() {\n    this.setState({\n      take: \"new-product\",\n      product: prepare_product,\n      comments: [{\n        id: 0,\n        accept: false,\n        email: \"\",\n        content: \"\"\n      }]\n    });\n  }\n\n  handelAddComment() {\n    const re = /\\S+@\\S+\\.\\S+/;\n    const id = this.state.comments[this.state.comments.length - 1].id + 1;\n\n    if (!re.test(this.state.comments[id - 1].email)) {\n      alert(\"Wrong email\");\n    } else if (this.state.comments[id - 1].content.length === 0) {\n      alert(\"Empty content\");\n    } else {\n      const upload = this.state.comments.map(item => {\n        if (item.id === id - 1) {\n          item.accept = true;\n          return item;\n        }\n\n        return item;\n      });\n\n      if (this.state.take !== 'new-product') {\n        const take_product = this.props.data.data.filter(item => item.id === parseInt(this.state.take))[0];\n        this.props.editDone(take_product.id, { ...take_product,\n          comments: upload\n        });\n      }\n\n      this.setState({ ...this.state,\n        comments: [...upload, {\n          id: id,\n          accept: false,\n          email: \"\",\n          content: \"\"\n        }]\n      });\n    }\n  }\n\n  handleChangeComment(ev, what, id) {\n    const upload = this.state.comments.map(item => {\n      if (item.id === id) {\n        return { ...item,\n          [what]: ev\n        };\n      } else {\n        return item;\n      }\n    });\n    this.setState({ ...this.state,\n      comments: upload\n    });\n  }\n\n  render() {\n    const {\n      data\n    } = this.props.data;\n    const keys = Object.keys(prepare_product);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formEdit\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: ev => this.takeProduct(ev.target.value),\n          value: this.state.take,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"new-product\",\n            children: \"new product\"\n          }, \"new-product\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.id,\n            children: item.id\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-input\",\n          children: keys.map(item => {\n            return this.createInput(`${item}: `, item);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Colors: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"colors\",\n          children: this.state.product.product_colors.map(clr => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color\",\n            style: {\n              backgroundColor: clr.hex_value\n            }\n          }, clr.colour_name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allButton-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: \"Done\",\n            onClick: () => this.handleDone(data[0].id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: \"Delete\",\n            onClick: () => this.handleDelete()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: \"Delete all\",\n            onClick: () => this.handleDeleteAll()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: \"Reset\",\n            onClick: () => {\n              this.handleReset();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img-buttton\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"formButton\",\n          type: \"button\",\n          value: \"Return to main page\",\n          onClick: () => this.props.history.push(\"/\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), this.state.product.image_link && /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"imgDetails-form\",\n          src: this.state.product.image_link,\n          alt: this.state.product.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Komentarze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }, this), this.state.comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"emailComment\",\n          type: \"text\",\n          value: comment.email,\n          onChange: ev => !comment.accept && this.handleChangeComment(ev.target.value, 'email', comment.id),\n          placeholder: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Content\",\n          onChange: ev => !comment.accept && this.handleChangeComment(ev.target.value, 'content', comment.id),\n          value: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 33\n        }, this), !comment.accept && /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"addComment\",\n          onClick: () => this.handelAddComment(),\n          type: \"button\",\n          value: \"Add comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 33\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  data: state.products\n});\n\nexport default connect(mapStateToProps, {\n  getData,\n  editDone,\n  deleteProduct,\n  newProduct,\n  deleteAllProducts\n})(Form);","map":{"version":3,"sources":["/home/kasia/inf/Front2/winkler-katarzyna/projekt/src/Component/form.js"],"names":["React","Component","connect","getData","editDone","deleteProduct","newProduct","deleteAllProducts","prepare_product","id","name","brand","price","currency","image_link","description","category","product_types","product_colors","tag_list","active","comments","Form","constructor","props","state","take","product","accept","email","content","takeProduct","bind","handleChange","createInput","handleDone","handleDelete","handleDeleteAll","handleReset","handelAddComment","handleChangeComment","componentDidMount","event","take_product","data","filter","item","parseInt","setState","ev","what","word","target","value","length","alert","split","filterComment","new_product","re","test","upload","map","render","keys","Object","clr","backgroundColor","hex_value","colour_name","history","push","comment","mapStateToProps","products"],"mappings":"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","sourcesContent":["import React, { Component }  from 'react';\nimport {connect} from 'react-redux'\nimport {getData} from '../Actions/getData'\nimport {editDone} from '../Actions/editDoneProduct'\nimport {deleteProduct} from '../Actions/deleteProduct'\nimport {newProduct} from '../Actions/newProduct'\nimport {deleteAllProducts} from '../Actions/deleteAll'\n\nimport './form.css'\n\nconst prepare_product = {\n    id: \"new\",\n    name: \"\",\n    brand: \"\",\n    price: \"0\",\n    currency: \"\",\n    image_link: \"\",\n    description: \"\",\n    category: \"\",\n    product_types: \"\",\n    product_colors: [],\n    tag_list: \"\",\n    active: \"\",\n    comments: []\n}\n\n\nclass Form extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n            take: \"new-product\",\n            product: prepare_product,\n            comments: [\n                {\n                    id: 0,\n                    accept: false,\n                    email: \"\",\n                    content: \"\"\n                }\n            ]\n        }\n\n        this.takeProduct = this.takeProduct.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.createInput = this.createInput.bind(this)\n        this.handleDone = this.handleDone.bind(this)\n        this.handleDelete = this.handleDelete.bind(this)\n        this.handleDeleteAll = this.handleDeleteAll.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handelAddComment = this.handelAddComment.bind(this)\n        this.handleChangeComment = this.handleChangeComment.bind(this)\n    }\n\n    componentDidMount(){\n        this.props.getData() \n    }\n\n    takeProduct(event){\n        const take_product = event !== \"new-product\" ? this.props.data.data.filter(item => item.id === parseInt(event))[0] : prepare_product\n        this.setState({\n            take: event,\n            product: {...take_product},\n            comments: [...take_product.comments, \n                {\n                    id: 0,\n                    accept: false,\n                    email: \"\",\n                    content: \"\"\n                }]\n        })     \n    }\n\n    handleChange(ev, what){\n        this.setState({\n            ...this.state,\n            product: {...this.state.product, [what]: ev}  \n        })   \n    }\n\n    createInput(word, what){\n        if(what !== 'product_colors' ){\n            return ((what !== 'description' && what !== 'id' && what !== 'active' &&\n                <div key={what}>\n                    <b>{word}</b><br/>\n                    <input\n                        type=\"text\" \n                        onChange={(ev) => this.handleChange(ev.target.value, what)}\n                        value={this.state.product[what]} /><br/>\n                </div>\n                ) || (what === 'description' && what !== 'id' && what !== 'active' &&\n                <div key={what}>\n                    <b>{word}</b><br/>\n                    <textarea \n                        className=\"description\"\n                        onChange={(ev) => this.handleChange(ev.target.value, 'description')} \n                        value={this.state.product.description} /><br/>\n                </div>\n            ))\n        }\n    }\n\n    handleDone(id){\n        const product = this.state.product\n        if(product.brand.length === 0){\n            product.brand = \"other\"\n        }\n        if(product.price.length === 0){\n            product.price = \"0\"\n        }\n        if(product.category.length === 0){\n            product.category = \"other\"\n        }\n        this.setState({...this.state, product: {...product}})\n\n\n\n        if(this.state.product.name.length === 0){\n            alert(\"Name is required\")\n        }\n        else if(this.state.product.description.split(\"\").length < 100){\n            alert(\"At least 100 letters in description\")\n        }\n        else{\n            if(this.state.take !== 'new-product'){                \n                this.setState({\n                    take: \"new-product\",\n                    product: prepare_product,\n                    comments: [\n                        {\n                            id: 0,\n                            accept: false,\n                            email: \"\",\n                            content: \"\"\n                        }\n                    ]\n                })\n            }\n            else{\n                const filterComment = this.state.comments.filter(item => item.accept !== false)\n                const new_product = this.state.product\n                new_product['id'] = id + 1\n                this.props.newProduct({...new_product, comments: filterComment})\n                this.setState({\n                    ...this.state,\n                    product: prepare_product,\n                    comments: [\n                        {\n                            id: 0,\n                            accept: false,\n                            email: \"\",\n                            content: \"\"\n                        }\n                    ]\n                })\n            }\n            this.props.getData() \n        }\n    }\n\n    handleDelete(){\n        if(this.state.take !== 'new-product'){\n            this.props.deleteProduct(this.state.product.id)\n            this.setState({\n                ...this.state, product: prepare_product\n            })\n        }\n    }   \n\n    handleDeleteAll(){\n        this.props.deleteAllProducts()\n    }\n\n    handleReset(){\n        this.setState({\n            take: \"new-product\",\n            product: prepare_product,\n            comments: [\n                {\n                    id: 0,\n                    accept: false,\n                    email: \"\",\n                    content: \"\"\n                }\n            ]\n        })\n    }\n\n    handelAddComment(){\n        const re = /\\S+@\\S+\\.\\S+/\n        const id = this.state.comments[this.state.comments.length - 1].id + 1\n        if(!re.test(this.state.comments[id - 1].email)){\n            alert(\"Wrong email\")\n        }\n        else if(this.state.comments[id - 1].content.length === 0){\n            alert(\"Empty content\")\n        }\n        else{\n            const upload = this.state.comments.map(item => {\n                if(item.id === id - 1){\n                    item.accept = true;\n                    return item\n                }\n                return item\n            })\n            if(this.state.take !== 'new-product'){   \n                const take_product = this.props.data.data.filter(item => item.id === parseInt(this.state.take))[0]\n                this.props.editDone(take_product.id, {...take_product, comments: upload})\n            }\n            this.setState({\n                ...this.state, \n                comments: [\n                    ...upload,\n                    {\n                        id: id,\n                        accept: false,\n                        email: \"\",\n                        content: \"\"\n                    }\n                ]\n            })  \n        }\n    }\n\n    handleChangeComment(ev, what, id){\n        const upload = this.state.comments.map(item => {\n            if (item.id === id){\n                return {...item, [what]: ev}\n            }\n            else{\n                return item\n            }\n        })\n        this.setState({\n            ...this.state,\n            comments: upload  \n        })   \n    }\n\n    render(){ \n        const {data} = this.props.data\n        const keys = Object.keys(prepare_product)\n\n        return(\n            <div className=\"form\">\n                <div className=\"formEdit\">\n                    <select\n                        onChange={(ev) => this.takeProduct(ev.target.value)}\n                        value={this.state.take}>\n                        <option \n                            key=\"new-product\"\n                            value=\"new-product\">\n                        new product\n                        </option>\n                        {data.map(item => \n                            <option \n                                key={item.id} \n                                value={item.id}>\n                            {item.id}\n                            </option>\n                        )}\n                    </select>\n                    <div className=\"form-input\">\n                        {keys.map(item => {\n                            return this.createInput(`${item}: `, item)\n                        })}\n                    </div>\n                    <b>Colors: </b>\n                    <div id=\"colors\">\n                        {this.state.product.product_colors.map(clr => \n                            <div\n                                key={clr.colour_name} \n                                className=\"color\" \n                                style={{backgroundColor:clr.hex_value}}>\n                            </div>)}\n                    </div>\n                    <div className=\"allButton-form\">\n                        <input \n                            type=\"button\"\n                            value=\"Done\"\n                            onClick={() => this.handleDone(data[0].id)}/>\n                        <input\n                            type=\"button\"\n                            value=\"Delete\"\n                            onClick={() => this.handleDelete()}/>\n                        <input\n                            type=\"button\"\n                            value=\"Delete all\"\n                            onClick={() => this.handleDeleteAll()}/>\n                        <input \n                            type=\"button\"\n                            value=\"Reset\"\n                            onClick={() => {this.handleReset()}}/>\n                    </div>\n                </div>\n                <div className=\"img-buttton\">\n                    <input \n                        className=\"formButton\"\n                        type=\"button\"\n                        value=\"Return to main page\"\n                        onClick={() => this.props.history.push(\"/\")}/>\n                    {this.state.product.image_link && (\n                    <img className=\"imgDetails-form\" src={this.state.product.image_link} alt={this.state.product.name} />)}\n                </div>\n                    <b>Komentarze</b>\n                        {this.state.comments.map(comment => (\n                            <div className=\"comment\" key={comment.id}>\n                                <input\n                                    className=\"emailComment\" \n                                    type=\"text\"\n                                    value={comment.email}\n                                    onChange={(ev) => !comment.accept && this.handleChangeComment(ev.target.value, 'email', comment.id)}\n                                    placeholder=\"Email\"/>\n                                <textarea\n                                    placeholder=\"Content\"\n                                    onChange={(ev) => !comment.accept && this.handleChangeComment(ev.target.value, 'content', comment.id)} \n                                    value={comment.content}/>\n                                {!comment.accept && (\n                                <input \n                                    className=\"addComment\"\n                                    onClick={() => this.handelAddComment()}\n                                    type=\"button\"\n                                    value=\"Add comment\"/>)}\n                            </div>\n                        ))}\n                </div>\n        )\n    }\n}\n\nconst mapStateToProps  = (state) => ({\n    data: state.products,\n})\n\nexport default connect(mapStateToProps, {getData, editDone, deleteProduct, newProduct, deleteAllProducts})(Form)\n"]},"metadata":{},"sourceType":"module"}