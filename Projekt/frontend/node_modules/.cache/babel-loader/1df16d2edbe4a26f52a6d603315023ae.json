{"ast":null,"code":"import { combineReducers } from 'redux';\nconst initialState = {\n  data: [],\n  category: [],\n  price: 0\n};\n\nfunction arrangement(data) {\n  const response = data.map(item => {\n    const {\n      id,\n      brand,\n      name,\n      price,\n      currency,\n      image_link,\n      description,\n      category,\n      product_types,\n      product_colors,\n      tag_list\n    } = item; //unique colors\n\n    const result = Array.from(new Set(product_colors.map(s => s.colour_name))).map(colour_name => {\n      return {\n        colour_name: colour_name,\n        hex_value: product_colors.find(s => s.colour_name === colour_name).hex_value\n      };\n    }); //save product\n\n    const product = {\n      id: id,\n      brand: brand,\n      name: name,\n      price: parseFloat(price) || 0,\n      currency: currency,\n      image: image_link,\n      description: description,\n      category: category || \"others\",\n      type: product_types,\n      product_colors: result,\n      tag: tag_list,\n      active: false\n    };\n    return product;\n  });\n  return response;\n}\n\nfunction takeCategory(data) {\n  const category = [...new Set(data.map(item => item.category))].filter(i => i);\n  return [...category, \"others\", \"all\"];\n}\n\nconst sortBy = key => {\n  return (a, b) => a[key] > b[key] ? 1 : b[key] > a[key] ? -1 : 0;\n};\n\nconst products = (state = initialState, action) => {\n  switch (action.type) {\n    case 'GET_DATA':\n      return { ...state,\n        data: arrangement(action.payload),\n        category: takeCategory(action.payload),\n        price: Math.max(...action.payload.map(item => item.price))\n      };\n\n    case 'SORT_DATA':\n      const data = arrangement(action.payload);\n      const filterByText = data.filter(item => item.name.toLowerCase().startsWith(action.text.toLowerCase()));\n      const filterByCategory = filterByText.filter(item => item.category.startsWith(...action.check.filter(a => a === item.category)));\n      let sortData = [];\n\n      if (action.sort === \"reverse\") {\n        sortData = filterByCategory.concat().sort(sortBy([\"name\"])).reverse();\n      } else {\n        sortData = filterByCategory.concat().sort(sortBy([action.sort]));\n      }\n\n      const filterByPrice = sortData.filter(item => action.from < item.price && item.price < action.to);\n      return { ...state,\n        data: filterByPrice\n      };\n\n    case 'EDIT_PRODUCT':\n      const editData = state.data.map(item => {\n        if (item.id === action.id) {\n          item.active = !item.active;\n        }\n\n        return item;\n      });\n      return { ...state,\n        data: editData\n      };\n\n    case 'EDIT_DONE':\n      return { ...state,\n        data: arrangement(action.payload)\n      };\n\n    case 'DELETE_PRODUCT':\n      return { ...state,\n        data: arrangement(action.payload)\n      };\n\n    case 'REQUEST':\n      return state;\n\n    case 'FAILURE':\n      console.log(\"Error\");\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst initialProductState = {\n  product: {\n    colors: []\n  }\n};\n\nconst product = (state = initialProductState, action) => {\n  switch (action.type) {\n    case 'GET_PRODUCT':\n      return { ...state,\n        product: arrangement(action.payload)[0]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  products,\n  product\n});","map":{"version":3,"sources":["/home/kasia/inf/Front2/winkler-katarzyna/projekt/src/Reducers/reducers.js"],"names":["combineReducers","initialState","data","category","price","arrangement","response","map","item","id","brand","name","currency","image_link","description","product_types","product_colors","tag_list","result","Array","from","Set","s","colour_name","hex_value","find","product","parseFloat","image","type","tag","active","takeCategory","filter","i","sortBy","key","a","b","products","state","action","payload","Math","max","filterByText","toLowerCase","startsWith","text","filterByCategory","check","sortData","sort","concat","reverse","filterByPrice","to","editData","console","log","initialProductState","colors"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux'\n\n\nconst initialState = {\n    data:[],\n    category: [],\n    price: 0\n}\n\nfunction arrangement(data){\n    const response = data.map(item => {\n        const {id, brand, name, price, currency, image_link, description, category, product_types, product_colors, tag_list} = item\n        \n        //unique colors\n        const result = Array.from(new Set(product_colors.map(s => s.colour_name)))\n            .map(colour_name => {\n                return {\n                    colour_name: colour_name,\n                    hex_value: product_colors.find(s => s.colour_name === colour_name).hex_value\n                }\n            });\n        \n        //save product\n        const product = {\n            id: id,\n            brand: brand,\n            name: name,\n            price: parseFloat(price) || 0,\n            currency: currency,\n            image: image_link,\n            description: description,\n            category: category || \"others\",\n            type: product_types,\n            product_colors: result,\n            tag: tag_list,\n            active: false\n        }\n        return product\n    })\n    return response\n}\n\nfunction takeCategory(data){\n    const category = [...new Set(data.map((item) => item.category))].filter(\n        (i) => i\n    )\n    return [...category, \"others\", \"all\"]\n}\n\nconst sortBy = (key) => {\n    return (a, b) => (a[key] > b[key]) ? 1 : ((b[key] > a[key]) ? -1 : 0);\n};\n\n\n\nconst products = (state = initialState, action) => {\n    switch (action.type){\n        case 'GET_DATA':\n            return {\n                ...state,\n                data: arrangement(action.payload),\n                category: takeCategory(action.payload),\n                price: Math.max(...action.payload.map(item => item.price))\n            }\n\n        case 'SORT_DATA':\n            const data = arrangement(action.payload)\n            const filterByText = data.filter(item => item.name.toLowerCase().startsWith(action.text.toLowerCase()))\n            const filterByCategory = filterByText.filter(item => item.category.startsWith(...action.check.filter(a => a === item.category))) \n            let sortData = []\n            if(action.sort === \"reverse\"){\n                sortData = filterByCategory.concat().sort(sortBy([\"name\"])).reverse()\n            }\n            else{\n                sortData = filterByCategory.concat().sort(sortBy([action.sort]))\n            }\n            const filterByPrice = sortData.filter(item => action.from < item.price && item.price < action.to)\n\n            return {\n                ...state,\n                data: filterByPrice\n            }\n\n        case 'EDIT_PRODUCT':\n            const editData = state.data.map(item => {\n                if (item.id === action.id){\n                    item.active = !item.active\n                }\n                return item\n            })\n\n            return {\n                ...state,\n                data: editData\n            }\n\n        case 'EDIT_DONE':\n            return {\n                ...state,\n                data: arrangement(action.payload)\n            }\n\n        case 'DELETE_PRODUCT':\n            return {\n                ...state,\n                data: arrangement(action.payload)\n            }\n        \n        case 'REQUEST':\n            return state\n\n        case 'FAILURE':\n            console.log(\"Error\")\n            return state\n\n        default:\n            return state;\n    }\n}\n\n\nconst initialProductState = {\n    product: {\n        colors: []\n    }\n}\n\n\nconst product = (state = initialProductState, action) => {\n    switch(action.type){\n        case 'GET_PRODUCT':\n            return {\n                ...state,\n                product: arrangement(action.payload)[0],\n            };\n    \n        default:\n            return state\n    }\n\n}\n\n\n\nexport default combineReducers({ products, product })"]},"metadata":{},"sourceType":"module"}